var f=(e,t,r)=>{if(!t.has(e))throw TypeError("Cannot "+r)};var u=(e,t,r)=>(f(e,t,"read from private field"),r?r.call(e):t.get(e)),d=(e,t,r)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,r)},p=(e,t,r,o)=>(f(e,t,"write to private field"),o?o.call(e,r):t.set(e,r),r);var w=(e,t,r)=>(f(e,t,"access private method"),r);import{a9 as m,aa as v}from"./BNZsPb_Dlwri.js";var c,i,g;class E{constructor(t){d(this,i);d(this,c,void 0);p(this,c,t.references.interceptors.map((r,o)=>[t.referencesMeta.interceptors[o].serviceId,r]))}async fetch(t,r){const o=r?.signal??void 0,n=Object.assign({},r?.context),s=y(r);h(o);let a=q(t);{const l={target:a,signal:o??new AbortController().signal,context:n,options:s};h(o),await w(this,i,g).call(this,l),a=l.target}const b=new Request(a,{...s,signal:o});return await window.fetch(b)}}c=new WeakMap,i=new WeakSet,g=async function(t){const{signal:r}=t;for(const[o,n]of u(this,c))if(h(r),n.beforeRequest)try{await n.beforeRequest(t)}catch(s){throw m(s),new Error(`Interceptor '${o}' failed with an error`,{cause:s})}};function q(e){return typeof e=="string"?new URL(e,window.location.href):e}function y(e){const t=e?.method??"GET",r=new Headers(e?.headers??{}),o={...e,method:t,headers:r};for(const n in o)A[n]&&delete o[n];return o}const A={context:1,signal:1};function h(e){e?.aborted&&v()}export{E as H};
