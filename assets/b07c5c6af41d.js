var v=(i,n,e)=>{if(!n.has(i))throw TypeError("Cannot "+e)};var c=(i,n,e)=>(v(i,n,"read from private field"),e?e.call(i):n.get(i)),d=(i,n,e)=>{if(n.has(i))throw TypeError("Cannot add the same private member more than once");n instanceof WeakSet?n.add(i):n.set(i,e)};import{c as g,j as o,a as x}from"./58de72bc6d14.js";import{a as f}from"./dd2d6a658487.js";import{B as u}from"./20105dd21121.js";import{C as h,H as p,T as a}from"./c4956cb3f758.js";import{V as A}from"./f7cc98549226.js";import"./2fab279a6e35.js";var r;class w{constructor(n){d(this,r,new Map);const e=c(this,r),t=n.references.providers;for(const l of t){const m=l.createActions();for(const s of m){if(e.has(s.id))throw new Error(`Action '${s.id}' was defined twice.`);e.set(s.id,s)}}}getActionInfo(){const n=Array.from(c(this,r).values()).map(e=>({id:e.id,text:e.text}));return n.sort((e,t)=>e.text.localeCompare(t.text)),n}triggerAction(n){const e=c(this,r).get(n);if(!e)throw new Error(`Action '${n}' was not defined.`);e.trigger()}}r=new WeakMap;class P{createActions(){return[{id:"logging-action",text:"Log a message",trigger(){console.info("Logging a message!")}}]}}class j{createActions(){return[{id:"clear-browser-action",text:"Clear browser",trigger(){document.body.innerHTML=""}},{id:"refresh-browser-action",text:"Refresh browser",trigger(){window.location.reload()}}]}}class b{createActions(){return[{id:"open-window-action",text:"Open window",trigger(){window.open("https://www.conterra.de")}}]}}const S={"extension-app":{name:"extension-app",services:{ActionServiceImpl:{name:"ActionServiceImpl",clazz:w,provides:[{name:"extension-app.ActionService",qualifier:void 0}],references:{providers:{name:"extension-app.ActionProvider",qualifier:void 0,all:!0}}},LoggingActionProvider:{name:"LoggingActionProvider",clazz:P,provides:[{name:"extension-app.ActionProvider",qualifier:void 0}],references:{}},MultiActionProvider:{name:"MultiActionProvider",clazz:j,provides:[{name:"extension-app.ActionProvider",qualifier:void 0}],references:{}},OpenWindowActionProvider:{name:"OpenWindowActionProvider",clazz:b,provides:[{name:"extension-app.ActionProvider",qualifier:void 0}],references:{}}},ui:{references:[{name:"extension-app.ActionService",qualifier:void 0,all:!1}]},properties:{}},"@open-pioneer/runtime":{name:"@open-pioneer/runtime",services:{},ui:{references:[]},properties:{}},"@open-pioneer/chakra-integration":{name:"@open-pioneer/chakra-integration",services:{},ui:{references:[]},properties:{}},"@open-pioneer/core":{name:"@open-pioneer/core",services:{},ui:{references:[]},properties:{}}},y="",I=[];function z(i){throw new Error(`Unsupported locale: '${i}'`)}const E=g(y),M=Object.freeze(Object.defineProperty({__proto__:null,loadMessages:z,locales:I,packages:S,styles:E},Symbol.toStringTag,{value:"Module"})),T="extension-app",k=f.bind(void 0,T);function C(){const i=k("extension-app.ActionService"),n=i.getActionInfo().map(({id:e,text:t})=>o.jsx(u,{onClick:()=>i.triggerAction(e),children:t},e));return o.jsxs(h,{maxW:"3xl",py:2,children:[o.jsx(p,{as:"h1",size:"4xl",mb:4,children:"Extension Example"}),o.jsx(a,{my:2,children:"This example demonstrates how to provide an extensible API with services and 1-to-N dependencies."}),o.jsxs(a,{my:2,children:["Individual ",o.jsx("code",{children:"ActionProvider"})," instances can provide a number of actions, which are then gathered and indexed by the ",o.jsx("code",{children:"ActionService"}),", which depends on all ActionProviders. The UI references the ",o.jsx("code",{children:"ActionService"})," and renders the provided actions as buttons. When a button is clicked, the appropriate action will be triggered."]}),o.jsxs(a,{my:2,children:["To add a new action, simply add new implementation of"," ",o.jsx("code",{children:'"extension-app.ActionProvider"'}),". The"," ",o.jsx("code",{children:"ActionService"})," will pick it up automatically."]}),o.jsxs(p,{as:"h4",size:"xl",children:["Buttons from ",o.jsx("code",{children:"ActionService"}),":"]}),o.jsx(A,{align:"start",children:n})]})}const q=x({component:C,appMetadata:M});customElements.define("extension-app",q);
